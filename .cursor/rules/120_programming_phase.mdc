---
description: Programming phase execution and TDD guidance, including Red/Green/Refactor rules and refactoring discipline
globs:
  - "src/test/**/*.java"
  - "plan.md"
  - "pom.xml"
alwaysApply: false
---

# Programming Phase and TDD Guidance

Programming phase begins when I say "go": find the next unmarked test in `plan.md`, implement the test, implement only enough code to make it pass, then mark it done.

## TDD Cycle

1. Red: write a failing test defining a small increment of functionality. Then stop for user review/edits before any implementation. Do not edit any files under `src/main/**` while in Red.
2. Green: after approval, write just enough code to pass.
3. Refactor: improve structure with tests passing.

Additional rules:
- Write the simplest failing test first.
- Implement the minimum code needed to pass.
- Refactor only after tests are passing.
- Separate structural (Tidy First) vs behavioral changes.

Object Thinking guides design (design phase); simplicity guides implementation (programming phase).

## TDD Methodology Details

### Red
- Expect compilation errors initially.
- Make failures clear and informative.
- Never write comments in tests.
- Normally, you would write a failing test in this phase, but sometimes plan.md defines a test which may actually pass. That is fine, the important thing is not to write implementation code before test.
- After writing the test, pause and request for my review, saying "Red done â€” say \"proceed\" to continue."
- When I say "proceed", proceed to Green phase, writing code to make the test pass.

### Green
- Write code to make tests pass.

### Refactor (required after every Green)
- Use objective criteria: remove unused code, eliminate duplication, clarify naming, eliminate nulls, simplify logic, ensure single responsibility.
- Run all tests before and after each refactor; make one refactor at a time; commit after each.
- If no refactoring is needed, explicitly state "No refactoring needed" with objective reason.

## Phase-Scoped Allowed Actions

- Red: edit `src/test/**`, run tests, update `plan.md`. Never change `src/main/**`.
- Green: minimal `src/main/**` changes to pass tests; run tests.
- Refactor: structural changes only; run tests before/after each.

## Example Workflow

1. Write a simple failing test.
2. Pause for user review and possible edits; do not implement yet.
3. When I say "proceed", implement the bare minimum to pass.
4. Run tests (Green).
5. Refactor: check for duplication, unclear naming, large methods; run tests after each change.
6. Commit behavioral change.
7. Make structural changes (Tidy First), running tests after each.
8. Commit structural changes separately.
9. Add another test and repeat.

Always run all tests each time (except long-running ones).

