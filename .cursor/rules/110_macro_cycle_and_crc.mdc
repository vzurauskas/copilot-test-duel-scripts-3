---
description: Macro-cycle instructions and CRC-based design rules for deriving objects and responsibilities from domain description
globs:
  - "design/**/*.md"
  - "plan.md"
  - "VISION.md"
alwaysApply: false
---

# Macro-cycle and CRC Design

## Macro-cycle

When a new iteration begins:
- Expand the domain description with rich prose to enable design extraction.
- Create or update CRC cards for domain objects involved in this iteration.
- Use CRC review exercises to verify sufficiency for implementation.
- Create an implementation plan in `plan.md` with a list of tests; each test triggers a micro-cycle.

## Design Guidelines

- Extract design from domain: nouns → objects; verbs → responsibilities.
- Do not think about data; focus on behavioral responsibilities.
- Do not attempt normalization or reusability.

### Creating CRC Cards

- List responsibilities. Common: "ID self" and "Describe self".
- List knowledge sources required to perform responsibilities. Mark how knowledge is obtained:
  - I know it already (field)
  - Given with request for service (parameter)
  - I know an object I can ask (collaborator)
  - Or a combination of the above
- List collaborators.

### Responsibilities Details

#### "Describe self"
- Can return a schemaless map/JSON or a `Description` object acting like a map.
- Think of this as communicating with another human; allow follow-up questions.
- The map can be mutated by other objects; they may ask you to remember something.

### Responsibility Heuristics

- An object does not control/manage any object other than itself.
- Avoid passive responsibilities (e.g., "know something").
- Delegate hard work; objects are lazy.
- Use collections to separate individual and collective behaviors.
- Use inversion of control; anthropomorphize freely.

Result: objects with intrinsic behaviors, consistent across contexts.

## Example CRC Card Template

```
Customer
- Responsibilities:
  - ID self
  - Describe self
  - Indicate desires
  - Make decisions
  - Confirm information
- Knowledge Sources:
  - I know my name and ID (fields)
  - I can ask my own Preferences object what I want (collaborator)
  - Options presented for confirmation (parameters)
  - I can ask vendors about available products (collaborators)
- Collaborators:
  - Vendors
  - Preferences
```

## From CRC Cards to Test Planning

How CRC informs tests:
1. Each responsibility becomes a test category.
2. Collaborations suggest integration tests.
3. Knowledge sources guide test data.
4. Anthropomorphic language guides test names.

Example mapping:
```
Fighter CRC:
- Responsibility: "Describe combat readiness"
- Knowledge: "I know my hit points, I know my weapon"
- Collaborator: Weapon

Generated Tests:
- fighterDescribesCombatReadinessWhenHealthy
- fighterDescribesCombatReadinessWhenWounded
- fighterDescribesCombatReadinessWithWeapon
- fighterDescribesCombatReadinessWithoutWeapon
```

